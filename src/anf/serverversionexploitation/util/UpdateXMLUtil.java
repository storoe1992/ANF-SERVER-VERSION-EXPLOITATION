/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package anf.serverversionexploitation.util;

/**
 *
 * @author Sergio
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import anf.serverversionexploitation.jumpsmanager.VersionJump;
import anf.serverversionexploitation.vertxcontroller.VertxController;

import io.vertx.core.file.FileSystem;
import java.io.File;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author Jordy
 */
public class UpdateXMLUtil {
 
    
    public static Document loadXMLFromFile(File xmlFile) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.parse(xmlFile);
    }
    
    public static Document loadXMLFromFile(InputStream xmlFile) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.parse(xmlFile);
    }
    
    public static void addOrNotProjectToProjectXML(String projectId,String projectName){
        String rootPath = PropertiesUtil.getInstance().getRootDatas();
        String fileProjectXMLPath = rootPath + File.separator + "projects.xml";
        File file = new File(fileProjectXMLPath);
        if(file.exists()){
            updateProjectXML(projectId, projectName);
        }else{
            createProject(projectId, projectName);
        }
    }
    
    public static void updateProjectXML(String projectId,String projectName){
        String rootPath = PropertiesUtil.getInstance().getRootDatas();
        String fileProjectXMLPath = rootPath + File.separator + "projects.xml";
        String id = "";
        File file = new File(fileProjectXMLPath);
        try{
            Document doc = loadXMLFromFile(file);
            Element element = doc.getDocumentElement();
            NodeList nodes = element.getElementsByTagName("project");
        int i = 0;
        boolean breaker = false;
        while(i<nodes.getLength()&& ! breaker){
            Node tempNode = nodes.item(i);
            if(tempNode.hasAttributes()){
                id = tempNode.getAttributes().getNamedItem("app-id").getNodeValue();
                if(projectId.equalsIgnoreCase(id)){
                    breaker = true;
                }
            }i++;
        }
        
        if(!breaker){ //project not found
            Element project = doc
                            .createElement("project");
                    project.setAttribute("app-id", projectId);
                    project.setAttribute("app-name", projectName);
                    
                    doc.getDocumentElement().appendChild(project);
                    
                TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc); 
		StreamResult result = new StreamResult(new File(fileProjectXMLPath));
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
                transformer.transform(source, result); 
        }
            
        }catch(Throwable ex){
            ex.printStackTrace();
        }
    }
    
    public static void createProject(String projectId,String projectName){
         String rootPath = PropertiesUtil.getInstance().getRootDatas();
        String fileProjectXMLPath = rootPath + File.separator + "projects.xml";
        
        try{
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
        
        Document doc = docBuilder.newDocument();
        Element generalRoot = doc.createElement("projects-list");
        doc.appendChild(generalRoot);
        
        Element rootElement = doc.createElement("project");
        generalRoot.appendChild(rootElement);
        
       
        
        rootElement.setAttribute("app-id", projectId);
        rootElement.setAttribute("app-name", projectName);
        
        
        
        
       TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc); 
		StreamResult result = new StreamResult(new File(fileProjectXMLPath));
         transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");       
        transformer.transform(source, result);
        }catch(Throwable ex){
            ex.printStackTrace();
        }
    }
    
    public static void makeJumps(String projectName,String lastVersionReleasedNow){
        String rootDatas = PropertiesUtil.getInstance().getRootDatas();
        String projectFolder = rootDatas + File.separator + projectName;
        String versionsProjectFolder = projectFolder + File.separator + "versions";
        LinkedList <String> versions = projectVersions(projectName);
        int size  = versions.size();
        if(size > 1){
            String fromVersion = lastVersionReleasedNow;
            String toVersion = lastVersionReleased(projectName);
            LinkedList<String>fromToVersion = getVersionsFromTo(projectName, fromVersion, toVersion);
            VersionJump vj = new VersionJump(projectName, fromVersion);
            for(String versionToProcess: fromToVersion){
                vj.processXML(new File(versionsProjectFolder + File.separator + versionToProcess + File.separator + "config.xml"));
            }
            vj.generateXML();
            
        }
            
        
    }
    
    private static LinkedList<String> projectVersions(String projectName){
        LinkedList <String> listVersions = new LinkedList<String>();
        String rootDatas = PropertiesUtil.getInstance().getRootDatas();
        String projectFolder = rootDatas + File.separator + projectName;
        String versionsProjectFolder = projectFolder + File.separator + "versions";
        FileSystem fs = VertxController.getInstance().getVertx().fileSystem();
        List<String>list = fs.readDirBlocking(versionsProjectFolder);
       
        for (String version : list) {
            version = version.substring(version.lastIndexOf(File.separator) + 1);
         
            if(version.startsWith("v")){
                listVersions.add(version);
            }
        }
        return listVersions;
    }
    
    public static String lastVersionReleased(String projectName){
        String result = "v0.0";
        LinkedList<String>listVersion = projectVersions(projectName);
        if(listVersion.size() > 0){
            result = listVersion.getLast();
        }
        return result;
    }
    
    public  static LinkedList<String> getVersionsFromTo(String project_name,String v1 , String v2){
       
        LinkedList<String>versions=new LinkedList<>();
        LinkedList<String>currents_versions = new LinkedList<>();
        currents_versions.addAll(projectVersions(project_name));
        ListIterator<String>iter = currents_versions.listIterator();
        while (iter.hasNext()) {
            String tempVersion = iter.next();
            int compareV1 = GeneralUtils.compareVersions(tempVersion, v1);
            int compareV2 = GeneralUtils.compareVersions(tempVersion, v2);
            
            if(compareV1 >= 0  && compareV2 <= 0)
             versions.add(tempVersion);
            
            }
            
               // System.out.println("controller: ProjectsController: getVersionFromTo: versions: " + versions);
                return versions;
                
        }
    
    public static void main(String [] args){
        makeJumps("autoupdate", "v0.0");
}
    
    
}



