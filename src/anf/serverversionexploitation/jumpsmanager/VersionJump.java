/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package anf.serverversionexploitation.jumpsmanager;


import anf.serverversionexploitation.util.PropertiesUtil;
import anf.serverversionexploitation.util.UpdateXMLUtil;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;

import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * Clase que se encarga de generar un XML especifico a una situación
 * determinada. Esta situación viene condicionada por el hecho de que es posible
 * que un usuario para actualizar desde su versión a la última tenga que pasar
 * por todas las versiones intermedias.
 *
 * @author Jordy
 */
public class VersionJump {

    private LinkedList<FileUpdateData> poolAdd = new LinkedList<>(); //!> archivos a adicionar
    private LinkedList<FileUpdateData> poolRep = new LinkedList<>(); //!> archivos a remplazar
    private LinkedList<FileUpdateData> poolDel = new LinkedList<>(); //!> archivos a eliminar

    private final String fromVersion;
    private final String appName;

    public VersionJump(String appName, String fromVersion) {
        this.appName = appName;
        this.fromVersion = fromVersion;
    }

    public void processXML(File xml){
        try{
        Document dom = UpdateXMLUtil.loadXMLFromFile(xml);
        Element doc = dom.getDocumentElement();
        String version = doc.getAttribute("to-version");
        /**
         * Archivos a adicionar
         */
        NodeList adds = doc.getElementsByTagName("add");
        int i = 0;
        while (i < adds.getLength()) {
            Node node = adds.item(i++);
            NodeList childs = node.getChildNodes();
            int j = 0;
            while (j < childs.getLength()) {
                Node f = childs.item(j++);
                if (f.hasAttributes()) {
                    FileUpdateData fd = new FileUpdateData();
                    fd.version = version;
                    fd.relativePath = f.getAttributes().getNamedItem("path").getNodeValue();
                    fd.name = f.getAttributes().getNamedItem("name").getNodeValue();
                    fd.relativeProductPath = f.getAttributes().getNamedItem("product-path").getNodeValue();
                    insertInPoolAdd(fd);
                }
            }
        }

        /**
         * Archivos a remplazar
         */
        NodeList reps = doc.getElementsByTagName("replace");
        i = 0;
        while (i < reps.getLength()) {
            Node node = reps.item(i++);
            NodeList childs = node.getChildNodes();
            int j = 0;
            while (j < childs.getLength()) {
                Node f = childs.item(j++);
                if (f.hasAttributes()) {
                    FileUpdateData fd = new FileUpdateData();
                    fd.version = f.getAttributes().getNamedItem("product-version").getNodeValue();
                    fd.relativePath = f.getAttributes().getNamedItem("path").getNodeValue();
                    fd.name = f.getAttributes().getNamedItem("name").getNodeValue();
                    fd.relativeProductPath = f.getAttributes().getNamedItem("product-path").getNodeValue();
                    //System.out.println("in xml of versión, replace product-path: " + fd.relativeProductPath);
                    insertInPoolReplace(fd);
                }
            }
        }

        /**
         * Archivos a remplazar
         */
        NodeList dels = doc.getElementsByTagName("remove");
        i = 0;
        while (i < dels.getLength()) {
            Node node = dels.item(i++);
            NodeList childs = node.getChildNodes();
            int j = 0;
            while (j < childs.getLength()) {
                Node f = childs.item(j++);
                if (f.hasAttributes()) {
                    FileUpdateData fd = new FileUpdateData();
//                    fd.version = f.getAttributes().getNamedItem("product-version").getNodeValue();
//                    fd.relativePath = f.getAttributes().getNamedItem("path").getNodeValue();
                    fd.name = f.getAttributes().getNamedItem("name").getNodeValue();
                    fd.relativeProductPath = f.getAttributes().getNamedItem("product-path").getNodeValue();
                    insertInPoolDelete(fd);
                }
            }
        }
        }catch(Throwable ex){
            ex.printStackTrace();
        }
    }//Here end

    private void insertInPoolAdd(FileUpdateData f) {
        FileUpdateData del = null;
        for (FileUpdateData d : poolDel) {
            if (d.compareTo(f) == 0) {
                del = d;
                break;
            }
        }
        if (del != null) {
            poolDel.remove(del);
            poolRep.add(f);
        } else {
            poolAdd.add(f);
        }
    }

    private void insertInPoolReplace(FileUpdateData f) {
        FileUpdateData del = null;
        for (FileUpdateData d : poolAdd) {
            if (d.compareTo(f) == 0) {
                del = d;
                break;
            }
        }
        if (del != null) {
            poolAdd.remove(del);
            poolAdd.add(f);
        } else {
            poolRep.add(f);
        }
    }

    private void insertInPoolDelete(FileUpdateData f) {
        FileUpdateData del = null;
        for (FileUpdateData d : poolAdd) {
            if (d.compareTo(f) == 0) {
                del = d;
                break;
            }
        }
        if (del != null) {
            poolAdd.remove(del);
        } else {
            FileUpdateData del2 = null;
            for (FileUpdateData d : poolRep) {
                if (d.compareTo(f) == 0) {
                    del2 = d;
                    break;
                }
            }
            if (del2 != null) {
                poolRep.remove(del2);
            } else {
                poolDel.add(f);
            }
        }
    }

    public InputStream getCachedJump() throws FileNotFoundException {
        String toVersion = VersionManager.getPrintableLatestVersion(this.appName);
        verifyCreationOfJumpsFolder();
        File res = new java.io.File(PropertiesUtil.getInstance().getRootDatas() + appName + "/__jumps/" + fromVersion + "---" + toVersion + ".xml");
        if (res.exists()) {
          //  System.out.println("ya existe en cache");
            return new FileInputStream(res);
        } else {
           // System.out.println("no existe en cache");
        }

        return null;
    }

    private void verifyCreationOfJumpsFolder(){
        File jmps = new java.io.File(PropertiesUtil.getInstance().getRootDatas() + appName + "/__jumps/");
        if (!jmps.exists()) {
            jmps.mkdirs();
        }
    }
    
    public  InputStream generateXML()  {
        
        
        String toVersion = VersionManager.getPrintableLatestVersion(this.appName);
        verifyCreationOfJumpsFolder();
        File res = new java.io.File(PropertiesUtil.getInstance().getRootDatas() + appName + "/__jumps/" + fromVersion + "---" + toVersion + ".xml");
        try{
        if (res.exists()) {
          //  System.out.println("ya existe en cache");
            return new FileInputStream(res);
        } else {
            System.err.println("no existe: ok, el path es? " + res.getPath());
        }

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        DOMImplementation implementation = builder.getDOMImplementation();
        Document document = implementation.createDocument(null, "update", null);
        document.setXmlVersion("1.0");
        Element root = document.getDocumentElement();
        root.setAttribute("from-version", fromVersion);

        root.setAttribute("to-version", toVersion);

        Element nodeAdd = document.createElement("add"); //creamos un nuevo elemento
        for (FileUpdateData a : poolAdd) {
            Element nodeFile = document.createElement("file");
            nodeFile.setAttribute("path", a.relativePath);
            nodeFile.setAttribute("name", a.name);
            nodeFile.setAttribute("product-version", a.version);
            nodeFile.setAttribute("product-path", a.relativeProductPath);
            nodeAdd.appendChild(nodeFile);
        }
        root.appendChild(nodeAdd); //pegamos el elemento a la raiz "Documento"

        Element nodeRep = document.createElement("replace"); //creamos un nuevo elemento
        for (FileUpdateData a : poolRep) {
            Element nodeFile = document.createElement("file");
            nodeFile.setAttribute("path", a.relativePath);
            nodeFile.setAttribute("name", a.name);
            nodeFile.setAttribute("product-version", a.version);
            nodeFile.setAttribute("product-path", a.relativeProductPath);
            nodeRep.appendChild(nodeFile);
        }
        root.appendChild(nodeRep); //pegamos el elemento a la raiz "Documento"

        Element nodeDel = document.createElement("remove"); //creamos un nuevo elemento
        for (FileUpdateData a : poolDel) {
            Element nodeFile = document.createElement("file");
            nodeFile.setAttribute("name", a.name);
            nodeFile.setAttribute("product-path", a.relativeProductPath);
            nodeDel.appendChild(nodeFile);
        }
        root.appendChild(nodeDel); //pegamos el elemento a la raiz "Documento"

        Source source = new DOMSource(document);

        Result result = new StreamResult(res); //nombre del archivo
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
        transformer.transform(source, result);
        }catch(Throwable ex){
            ex.printStackTrace();
        }
        FileInputStream result = null;
        try {
            result = new FileInputStream(res);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VersionJump.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }

    public static void main(String[] args) {
           VersionJump vj = new VersionJump("autoupdate", "0.1");
            vj.processXML(new File(PropertiesUtil.getInstance().getRootDatas() + "autoupdate/versions/v0.1/config.xml"));
            vj.processXML(new File("datas/autoupdate/versions/v0.2/config.xml"));
            vj.generateXML();
        
    }

}
